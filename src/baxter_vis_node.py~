#!/usr/bin/env python  
import roslib
import rospy
import math
import tf
#from sensor_msgs.msg import Image 
from sensor_msgs.msg import Image 
#from std_msgs.msg import ##

import baxter_interface import CameraController



#i can either use the RSDK command or hardcode it into my own code,
# if i use the RSDK then i have to make a launch file

#set the head location
#calibrate the camera

#publish the location of the selected tag on some topic
# pub the topic once?
# this shows you how to subscripe to images in ROS
#http://wiki.ros.org/rospy_tutorials/Tutorials/WritingImagePublisherSubscriber

#open the head camera using the 
	#rosrun baxter_tools camera_control.py -o head_camera -r 1280x800
	#look at the baxter python API to get connection to camera

#http://sdk.rethinkrobotics.com/wiki/Hello_Baxter#Step_4:_Run_an_Example_Program

 
	# he messages forma
	#http://docs.ros.org/api/sensor_msgs/html/msg/CompressedImage.html
	#rospy.Subscriber('/cameras/head_camera/image', CompressedImage, ?,?)
	#note that classes support two kinds of operations, attribute references and instantiation
	#Alos classes can be assigned to variables
	#how? if JointStates is a class (coming from sensor messages)then js = JointStates() assings this in the form 
	#of a function
	#js.header.stamp = rospy.Time.now() assigns the time given by rospy to the stamp attribute
	# of js.
	'''
	        js.header.stamp = rospy.Time.now()
        t = (rospy.Time.now() - t0)
        secs = float(t.to_sec())
        timer = secs
        print timer
        
        js.name = ["joint1", "joint2"]
        js.position = kinematics(timer)
    '''
	img = ???
	return img
def sort_block():


def id_blocks(img):
	#look at image, identify tags, sort blocks somehow, look for loc. of blocks in image
	# send the x,y or transform data after looking computing distance from body

	return x,y


def vis_node():
	#intialize node in the main function
	#at some point in time, turn on and open the head camera
	#	http://sdk.rethinkrobotics.com/wiki/Camera_Control_Example
	#set head so that it faces forward
	head_cam = CameraController('head_camera')
	head_cam.open ????
	rospy.init_node('baxter_vis_node', anonymous=False)
	rospy.Subscriber('/cameras/head_camera/image', Image)
	img = Image()
	img.header.stamp  = rospy.Time.now() #may not need header and just data
	img.data = ???

	msg_rcvd = 0
	while not msg_rcvd = 1:	
		set_head_location()
		img = get_image()
		x,y = id_blocks(img)


    #only send this once
    rospy.spin()



if __name__ == '__main__':
    
    main()
