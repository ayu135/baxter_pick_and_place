#!/usr/bin/env python  
import roslib
import rospy
import math
import tf
from sensor_msgs.msg import Image 

#import baxter_interface import CameraController




def xdisplay_pub(data):
    pub = rospy.Publisher('/robot/xdisplay', Image, latch=True, queue_size=10)
    #pub = rospy.Publisher('/robot_image', Image, latch=True, queue_size=10)
    pub.publish(data)
    
    
def get_tag_pose():
    #nothing

    
def get_image():
    #img = Image()
    rospy.init_node('image_data', anonymous=False)
    rate = rospy.Rate(10) # 10hz
    #rostopic pub /robot/head/command_head_pan baxter_core_msgs/HeadPanCommand -- 0 6
    #time_now =rospy.Time.now()
    count = 0
    while not rospy.is_shutdown():
        #rospy.Subscriber("/usb_cam/image_raw", Image, xdisplay_pub)
        #rospy.subscriber("/cameras/right_hand_camera/image",Image, get_tag_pose)
        if count%10 = 0:
            rospy.Subscriber("/cameras/right_hand_camera/image", Image, xdisplay_pub)
        count = count + 1
        rate.sleep()

def main_func():
    get_image()



# this shows you how to subscripe to images in ROS
#http://wiki.ros.org/rospy_tutorials/Tutorials/WritingImagePublisherSubscriber

#open the head camera using the 
#rosrun baxter_tools camera_control.py --open head_camera --resolution 1280x800
#look at the baxter python API to get connection to camera
#http://sdk.rethinkrobotics.com/wiki/Hello_Baxter#Step_4:_Run_an_Example_Program

 
# he messages forma
#http://docs.ros.org/api/sensor_msgs/html/msg/CompressedImage.html
#rospy.Subscriber('/cameras/head_camera/image', CompressedImage, ?,?)
#note that classes support two kinds of operations, attribute references and instantiation
#Alos classes can be assigned to variables
#how? if JointStates is a class (coming from sensor messages)then js = JointStates() assings this in the form 
#of a function
#js.header.stamp = rospy.Time.now() assigns the time given by rospy to the stamp attribute
# of js.


if __name__ == '__main__':
    
    main_func()
